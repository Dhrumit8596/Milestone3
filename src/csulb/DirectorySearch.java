/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csulb;

import RankedRetrieval.DefaultRanking;
import RankedRetrieval.OkapiBM25Ranking;
import cecs429.documents.DirectoryCorpus;
import cecs429.documents.Document;
import cecs429.documents.DocumentCorpus;
import disk.DiskIndexWriter;
import cecs429.index.Index;
import cecs429.index.Indexes;
import cecs429.index.InvertedIndex;
import cecs429.index.Posting;
import cecs429.index.PostingAccumulator;
import cecs429.query.BooleanQueryParser;
import cecs429.query.QueryComponent;
import RankedRetrieval.RankedRetrievals;
import RankedRetrieval.RankingStrategy;
import RankedRetrieval.Tf_IdfRanking;
import RankedRetrieval.WackyRanking;
import cecs429.text.AdvancedTokenProcessor;
import cecs429.text.EnglishTokenStream;
import disk.DiskInvertedIndex;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.net.URI;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author vwake
 */
public class DirectorySearch extends javax.swing.JFrame {

    private Indexes indexes;
    //private String path;
    //private URI path;
    // private String FileName;
    //  private Object query;
    // private String Directorypath;
    // private Object query;
    String query;
    private static String mPath;
    private String input;
    private List<String> listKeys;
    private DocumentCorpus corpus;
    private List<Posting> result_docs = new ArrayList();
    private List<PostingAccumulator> Ranking_results = new ArrayList<>();
    private AdvancedTokenProcessor processor = new AdvancedTokenProcessor();
    private RankingStrategy ranking_strategy;

    /**
     * Creates new form DirectorySearch
     */
    public DirectorySearch() {
        initComponents();
        VocabButton.setVisible(false);
        SearchButton.setVisible(false);
        //VocabButton.setVisible(true);
        StemButton.setVisible(false);
        Result_field.setVisible(false);
        end.setVisible(false);
        querytext.setVisible(false);
        //Document_list.setVisible(false);
        QueryLabel.setVisible(false);
        ResultLabel.setVisible(false);
        //jlist.setVisible(false);
        Document_list.setVisible(false);
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(false);
        BooleanRetrievalRadioButton.setVisible(false);
        RankedRetrievalRadioButton.setVisible(false);
        Document_list.setVisible(false);
        //jComboBox1.setVisible(false);
        DefaultRadioButton.setVisible(false);
        Tf_IdfRadioButton.setVisible(false);
        OkapiBM25RadioButton.setVisible(false);
        WackyRadioButton.setVisible(false);
        RetrievalLabel.setVisible(false);

        Document_list.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    
                    int Id = Document_list.getSelectedIndex();
                    if(Id >=0)
                {
                    Reader r = null;
                    if(BooleanRetrievalRadioButton.isSelected())
                    r = corpus.getDocument(result_docs.get(Id).getDocumentId()).getContent();
                    else
                        if(RankedRetrievalRadioButton.isSelected())
                            r = corpus.getDocument(Ranking_results.get(Id).getPosting().getDocumentId()).getContent();
                        
                    Scanner s = new Scanner(r);
                    String content = "";
                    while (s.hasNextLine()) {
                        content += s.nextLine();
                    }

                    new ResultDocument(content).setVisible(true);
                }
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        DirectorySelectionButton = new javax.swing.JButton();
        DirectoryInput = new javax.swing.JTextField();
        BuildIndexButton = new javax.swing.JButton();
        VocabButton = new javax.swing.JButton();
        StemButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        querytext = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Document_list = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Result_field = new javax.swing.JTextArea();
        end = new javax.swing.JButton();
        QueryLabel = new javax.swing.JLabel();
        ResultLabel = new javax.swing.JLabel();
        document_no = new javax.swing.JLabel();
        QueryIndexButton = new javax.swing.JButton();
        BooleanRetrievalRadioButton = new javax.swing.JRadioButton();
        RankedRetrievalRadioButton = new javax.swing.JRadioButton();
        DefaultRadioButton = new javax.swing.JRadioButton();
        Tf_IdfRadioButton = new javax.swing.JRadioButton();
        OkapiBM25RadioButton = new javax.swing.JRadioButton();
        WackyRadioButton = new javax.swing.JRadioButton();
        RetrievalLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Choose Directory");

        DirectorySelectionButton.setText("Browse");
        DirectorySelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectorySelectionButtonActionPerformed(evt);
            }
        });

        DirectoryInput.setToolTipText("Select directory to index");
        DirectoryInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectoryInputActionPerformed(evt);
            }
        });

        BuildIndexButton.setText("Build Index");
        BuildIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildIndexButtonActionPerformed(evt);
            }
        });

        VocabButton.setText("Print Vocab");
        VocabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VocabButtonActionPerformed(evt);
            }
        });

        StemButton.setText("Stem");
        StemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StemButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        querytext.setToolTipText("Enter the query");
        querytext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                querytextActionPerformed(evt);
            }
        });

        Document_list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(Document_list);

        Result_field.setColumns(20);
        Result_field.setRows(5);
        jScrollPane2.setViewportView(Result_field);

        end.setText("Quit");
        end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endActionPerformed(evt);
            }
        });

        QueryLabel.setText("Query");

        ResultLabel.setText("Result");

        QueryIndexButton.setText("Query Index");
        QueryIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryIndexButtonActionPerformed(evt);
            }
        });

        BooleanRetrievalRadioButton.setText("Boolean Retrieval");
        BooleanRetrievalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BooleanRetrievalRadioButtonActionPerformed(evt);
            }
        });

        RankedRetrievalRadioButton.setText("Ranked Retrieval");
        RankedRetrievalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RankedRetrievalRadioButtonActionPerformed(evt);
            }
        });

        DefaultRadioButton.setText("Default");
        DefaultRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefaultRadioButtonActionPerformed(evt);
            }
        });

        Tf_IdfRadioButton.setText("Tf - Idf");
        Tf_IdfRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tf_IdfRadioButtonActionPerformed(evt);
            }
        });

        OkapiBM25RadioButton.setText("Okapi BM25");
        OkapiBM25RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkapiBM25RadioButtonActionPerformed(evt);
            }
        });

        WackyRadioButton.setText("Wacky");
        WackyRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WackyRadioButtonActionPerformed(evt);
            }
        });

        RetrievalLabel.setText("Select one of the Method");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(VocabButton)
                        .addGap(150, 150, 150)
                        .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(132, 132, 132)
                        .addComponent(StemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(end, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(document_no, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 4, Short.MAX_VALUE)
                                                .addComponent(jLabel1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(ResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(RetrievalLabel))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(QueryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(DirectoryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(DirectorySelectionButton))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(querytext, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 801, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(136, 136, 136)
                                                .addComponent(BuildIndexButton))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(115, 115, 115)
                                                .addComponent(BooleanRetrievalRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(DefaultRadioButton)
                                                .addGap(76, 76, 76)
                                                .addComponent(Tf_IdfRadioButton)
                                                .addGap(9, 9, 9)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(QueryIndexButton)
                                                    .addComponent(OkapiBM25RadioButton))
                                                .addGap(46, 46, 46)
                                                .addComponent(WackyRadioButton)
                                                .addGap(302, 302, 302))
                                            .addComponent(RankedRetrievalRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(10, 10, 10)))
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DirectoryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DirectorySelectionButton)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BuildIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(QueryIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RankedRetrievalRadioButton)
                    .addComponent(BooleanRetrievalRadioButton)
                    .addComponent(RetrievalLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DefaultRadioButton)
                    .addComponent(Tf_IdfRadioButton)
                    .addComponent(OkapiBM25RadioButton)
                    .addComponent(WackyRadioButton))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(QueryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(querytext, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(document_no)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VocabButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(end, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DirectorySelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectorySelectionButtonActionPerformed
        // TODO add your handling code here:

        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jf.showOpenDialog(this);
        File f = jf.getSelectedFile();
        String path = f.getAbsolutePath();
        mPath = path;
        DirectoryInput.setText(path);
        // String Directorypath = path;
        System.out.print("Outside Button: " + path);


    }//GEN-LAST:event_DirectorySelectionButtonActionPerformed

    private void BuildIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildIndexButtonActionPerformed
        try {
            // TODO add your handling code here:
            //  String directoryName = query.substring(5);
            //DocumenCorpus corpus = DirectoryCorpus.loadJsonDirectory(Paths.get(directoryName).toAbsolutePath(), ".json");
            // System.out.print("Path inside button:  " +path);

            mPath = DirectoryInput.getText();

            long startTime = System.currentTimeMillis();
            corpus = DirectoryCorpus.loadJsonDirectory(Paths.get(mPath).toAbsolutePath(), ".json");
            indexes = indexCorpus(corpus);

            //writing INDEX on disk
            DiskIndexWriter disk_writer = new DiskIndexWriter();
            List<Long> voc_positions = disk_writer.write_posting(indexes.index, mPath + "\\index\\");
            List<Long> vocab_positions = disk_writer.write_vocab(indexes.index.getVocabulary(), mPath + "\\index\\");
            disk_writer.write_vocab_table(vocab_positions, voc_positions, mPath + "\\index\\");
            DiskInvertedIndex DII = new DiskInvertedIndex(mPath + "\\index\\");
            //writing Biword on disk
            List<Long> voc_positions_biword = disk_writer.write_posting(indexes.biword_index, mPath + "\\index\\biword\\");
            List<Long> vocab_positions_biword = disk_writer.write_vocab(indexes.biword_index.getVocabulary(), mPath + "\\index\\biword\\");
            disk_writer.write_vocab_table(vocab_positions_biword, voc_positions_biword, mPath + "\\index\\biword\\");
            DiskInvertedIndex DII_biword = new DiskInvertedIndex(mPath + "\\index\\biword\\");
            //DiskInvertedIndex[] i = {DII, DII_biword};
            indexes = new Indexes(DII, DII_biword);
            long stopTime = System.currentTimeMillis();
            long elapsedTime = stopTime - startTime;
            document_no.setText("Total time elapsed for indexing : " + elapsedTime / 1000 + " secs");

            // AdvancedTokenProcessor processor = new AdvancedTokenProcessor();
            String query;

            BooleanRetrievalRadioButton.setVisible(true);
            RankedRetrievalRadioButton.setVisible(true);
            RetrievalLabel.setVisible(true);

            ButtonGroup group = new ButtonGroup();
            group.add(RankedRetrievalRadioButton);
            group.add(BooleanRetrievalRadioButton);

        } catch (IOException ex) {
            Logger.getLogger(DirectorySearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BuildIndexButtonActionPerformed

    private void VocabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VocabButtonActionPerformed

        //        System.out.println("First 1000 words:: ");
        //  List<String> listKeys = new ArrayList<String>();
        listKeys = indexes.index.getVocabulary();
        //   System.out.println("IMplemented Vocab");
        String result = "";
        int vocab = 0;
        for (String s : listKeys) {
            if (vocab < 1000) {
                vocab++;
                result += s + "\n";
            }
        }
        Result_field.setText(result);
        //   Result_field.setVisible(false);
        //  VocabButton.setVisible(false);
    }//GEN-LAST:event_VocabButtonActionPerformed

    private void StemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StemButtonActionPerformed
        // TODO add your handling code here:
        // BooleanQueryParser queryparser = new BooleanQueryParser();
        // StemButton.setVisible(false);

        String input = querytext.getText();
        AdvancedTokenProcessor processor = new AdvancedTokenProcessor();

        //String stemmingWord = query.substring(4).trim();
        String result = processor.stem(input);
        Result_field.setText(result);

        //  StemButton.setVisible(false);
    }//GEN-LAST:event_StemButtonActionPerformed

    private void DirectoryInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectoryInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DirectoryInputActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        Document_list.setVisible(true);
        jScrollPane1.setVisible(true);
        String query = querytext.getText();
        DefaultListModel<String> listModel = new DefaultListModel<>();
        if (BooleanRetrievalRadioButton.isSelected()) {
            Result_field.setText("");
            BooleanQueryParser queryparser = new BooleanQueryParser();
            QueryComponent query_component = queryparser.parseQuery(query);
            int i = 0;
            result_docs = query_component.getPostings(indexes, processor);

            ArrayList<String> documents = new ArrayList<>();
            System.out.println(result_docs.size());
            System.out.println(corpus.getCorpusSize());
            for (Posting p : result_docs) {
                i++;
                System.out.println(p.getDocumentId());
                listModel.addElement(corpus.getDocument(p.getDocumentId()).getTitle());
                System.out.println(i + ")" + corpus.getDocument(p.getDocumentId()).getTitle());
            }
            if (i == 0) {
                document_no.setText("No Match Found for word \"" + query + "\".");
                //System.out.println("No Match Found for word \"" + query + "\".");
            } else {
                document_no.setText("Total number of Document word \"" + query + "\" occured is :: " + i);
            }
        } else if (RankedRetrievalRadioButton.isSelected()) {
            String result = "";
            RankedRetrievals r = new RankedRetrievals(query, mPath, corpus.getCorpusSize());
            
            try {
                Ranking_results = r.getPostings(indexes, processor, ranking_strategy);
            } catch (IOException ex) {
                Logger.getLogger(DirectorySearch.class.getName()).log(Level.SEVERE, null, ex);
            }
            int j = 0;
            for (PostingAccumulator p : Ranking_results) {
                j++;
                Posting posting = p.getPosting();
                System.out.println(posting.getDocumentId());
                listModel.addElement(corpus.getDocument(posting.getDocumentId()).getTitle());
                String s = corpus.getDocument(posting.getDocumentId()).getTitle() + " Accum value - " + p.getAccumulator();
                result += s +"\n";
                System.out.println(j + ")" + corpus.getDocument(posting.getDocumentId()).getTitle() + " Accum value - " + p.getAccumulator());
            }
            Result_field.setText(result);
            if (j == 0) {
                document_no.setText("No Match Found for word \"" + query + "\".");
                //System.out.println("No Match Found for word \"" + query + "\".");
            } else {
                document_no.setText("Total number of Document word \"" + query + "\" occured is :: " + j);
            }
        }
        Document_list.setModel(listModel);
        Document_list.setVisible(true);
        jScrollPane2.setVisible(true);

    }//GEN-LAST:event_SearchButtonActionPerformed

    private void querytextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_querytextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_querytextActionPerformed

    private void endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_endActionPerformed

    private void BooleanRetrievalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BooleanRetrievalRadioButtonActionPerformed
        // TODO add your handling code here:

        if (BooleanRetrievalRadioButton.isSelected()) {
            BooleanRetrievalRadioButton.setSelected(true);
            VocabButton.setVisible(true);
            SearchButton.setVisible(true);
            //VocabButton.setVisible(true);
            StemButton.setVisible(true);
            Result_field.setVisible(true);
            end.setVisible(true);
            querytext.setVisible(true);
            //Document_list.setVisible(false);
            QueryLabel.setVisible(true);
            ResultLabel.setVisible(true);
            //jlist.setVisible(false);
            //Document_list.setVisible(true);
            //  jScrollPane1.setVisible(true);
            jScrollPane2.setVisible(true);

            //   BooleanRetrievalRadioButton.setVisible(false);
            //  RankedRetrievalRadioButton.setVisible(false);
            //   Document_list.setVisible(true);
            DefaultRadioButton.setVisible(false);
            Tf_IdfRadioButton.setVisible(false);
            OkapiBM25RadioButton.setVisible(false);
            WackyRadioButton.setVisible(false);
        }


    }//GEN-LAST:event_BooleanRetrievalRadioButtonActionPerformed

    private void RankedRetrievalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RankedRetrievalRadioButtonActionPerformed
        // TODO add your handling code here:
        ButtonGroup group = new ButtonGroup();
        group.add(DefaultRadioButton);
        group.add(OkapiBM25RadioButton);
        group.add(Tf_IdfRadioButton);
        group.add(WackyRadioButton);

        VocabButton.setVisible(true);
        SearchButton.setVisible(true);
        //VocabButton.setVisible(true);
        StemButton.setVisible(true);
        Result_field.setVisible(true);
        end.setVisible(true);
        querytext.setVisible(true);
        //Document_list.setVisible(false);
        QueryLabel.setVisible(true);
        ResultLabel.setVisible(true);
        //jlist.setVisible(false);
        //Document_list.setVisible(true);
        jScrollPane1.setVisible(true);
        DefaultRadioButton.setVisible(true);
        Tf_IdfRadioButton.setVisible(true);
        OkapiBM25RadioButton.setVisible(true);
        WackyRadioButton.setVisible(true);
        jScrollPane1.setVisible(true);

    }//GEN-LAST:event_RankedRetrievalRadioButtonActionPerformed

    private void DefaultRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefaultRadioButtonActionPerformed
        // TODO add your handling code here:
        DiskInvertedIndex DII = new DiskInvertedIndex(mPath + "\\index\\");
        ranking_strategy = new DefaultRanking(DII);
    }//GEN-LAST:event_DefaultRadioButtonActionPerformed

    private void Tf_IdfRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tf_IdfRadioButtonActionPerformed
        // TODO add your handling code here:
        DiskInvertedIndex DII = new DiskInvertedIndex(mPath + "\\index\\");
        ranking_strategy = new Tf_IdfRanking(DII);
    }//GEN-LAST:event_Tf_IdfRadioButtonActionPerformed

    private void OkapiBM25RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkapiBM25RadioButtonActionPerformed
        // TODO add your handling code here:
        DiskInvertedIndex DII = new DiskInvertedIndex(mPath + "\\index\\");
        ranking_strategy = new OkapiBM25Ranking(DII);
    }//GEN-LAST:event_OkapiBM25RadioButtonActionPerformed

    private void WackyRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WackyRadioButtonActionPerformed
        // TODO add your handling code here:
        DiskInvertedIndex DII = new DiskInvertedIndex(mPath + "\\index\\");
        ranking_strategy = new WackyRanking(DII);
    }//GEN-LAST:event_WackyRadioButtonActionPerformed

    private void QueryIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryIndexButtonActionPerformed
        // TODO add your handling code here:
        mPath = DirectoryInput.getText();
        corpus = DirectoryCorpus.loadJsonDirectory(Paths.get(mPath).toAbsolutePath(), ".json");
        System.out.println(corpus.getCorpusSize());
        DiskInvertedIndex DII = new DiskInvertedIndex(mPath + "\\index\\");
        DiskInvertedIndex DII_biword = new DiskInvertedIndex(mPath + "\\index\\biword\\");
        indexes = new Indexes(DII, DII_biword);
        String query;

        BooleanRetrievalRadioButton.setVisible(true);
        RankedRetrievalRadioButton.setVisible(true);
        RetrievalLabel.setVisible(true);

        ButtonGroup group = new ButtonGroup();
        group.add(RankedRetrievalRadioButton);
        group.add(BooleanRetrievalRadioButton);
    }//GEN-LAST:event_QueryIndexButtonActionPerformed

    private static Indexes indexCorpus(DocumentCorpus corpus) throws IOException {

        //HashSet<String> vocabulary = new HashSet<>();
        List<Double> doc_weights_file = new ArrayList<>();
        double doc_weight = 0;
        double doc_length = 0;
        double byte_size = 0;
        double avg_tftd = 0;
        double doc_length_a = 0;
        double total_length_tftd = 0;
        AdvancedTokenProcessor processor = new AdvancedTokenProcessor();
        InvertedIndex index = new InvertedIndex();
        InvertedIndex biword = new InvertedIndex();
        for (Document d : corpus.getDocuments()) {
            EnglishTokenStream ets = new EnglishTokenStream(d.getContent());
            File doc = new File(d.getFilePath().toString());
            byte_size = (double) doc.length();
            int term_position = 0;
            int term_count = 0;
            String previous = "";
            HashMap<String, Integer> map = new HashMap<>();
            for (String s : ets.getTokens()) {
                term_position++;
               // term_count++;
                List<String> word = processor.processToken(s);

                for (int i = 0; i < word.size(); i++) {

                    if (map.containsKey(word.get(i))) {
                        term_count++;
                        int count = map.get(word.get(i));
                        map.put(word.get(i), count+1);
                    } else {
                        term_count++;
                        map.put(word.get(i), 1);
                    }
                    index.addTerm(word.get(i), d.getId(), term_position);

                    if (previous != "") {
                        biword.addTerm(previous + " " + word.get(i), d.getId(), term_position - 1);
                    }
                    previous = word.get(i);

                }

            }
            doc_length = (double) term_count;
            double w_d_t = 0;
            double ld = 0;
            double total_tftd = 0;
            for (HashMap.Entry<String, Integer> entry : map.entrySet()) {
                int tftd = entry.getValue();
                total_tftd += tftd;
                w_d_t = 1 + Math.log(tftd);
                ld = ld + Math.pow(w_d_t,2);
            }
            ld = Math.pow(ld,0.5);
            doc_weight = ld;
            total_length_tftd += term_count;
            avg_tftd = total_tftd / (double) map.size();
            doc_weights_file.add(doc_weight);
            doc_weights_file.add(doc_length);
            doc_weights_file.add(byte_size);
            doc_weights_file.add(avg_tftd);
            ets.close();
        }
        doc_length_a = total_length_tftd / (double) corpus.getCorpusSize();
        doc_weights_file.add(doc_length_a);
        DiskIndexWriter DiskWriter = new DiskIndexWriter();
        DiskWriter.write_doc_weights(doc_weights_file, mPath + "\\index\\");
        Indexes i = new Indexes(index, biword);

        return i;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DirectorySearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DirectorySearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DirectorySearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DirectorySearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DirectorySearch().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BooleanRetrievalRadioButton;
    private javax.swing.JButton BuildIndexButton;
    private javax.swing.JRadioButton DefaultRadioButton;
    private javax.swing.JTextField DirectoryInput;
    private javax.swing.JButton DirectorySelectionButton;
    private javax.swing.JList<String> Document_list;
    private javax.swing.JRadioButton OkapiBM25RadioButton;
    private javax.swing.JButton QueryIndexButton;
    private javax.swing.JLabel QueryLabel;
    private javax.swing.JRadioButton RankedRetrievalRadioButton;
    private javax.swing.JLabel ResultLabel;
    private javax.swing.JTextArea Result_field;
    private javax.swing.JLabel RetrievalLabel;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton StemButton;
    private javax.swing.JRadioButton Tf_IdfRadioButton;
    private javax.swing.JButton VocabButton;
    private javax.swing.JRadioButton WackyRadioButton;
    private javax.swing.JLabel document_no;
    private javax.swing.JButton end;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField querytext;
    // End of variables declaration//GEN-END:variables

    private static class JComboBox1<T> {

    }

}
