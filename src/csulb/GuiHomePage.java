/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csulb;

import cecs429.documents.DirectoryCorpus;
import cecs429.documents.Document;
import cecs429.documents.DocumentCorpus;
import cecs429.index.Indexes;
import cecs429.index.InvertedIndex;
import cecs429.index.Posting;
import cecs429.text.AdvancedTokenProcessor;
import cecs429.text.EnglishTokenStream;
import disk.DiskIndexWriter;
import disk.DiskInvertedIndex;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
 
//private static String mPath;
/**
 *
 * @author vwake
 */


public class GuiHomePage extends javax.swing.JFrame {
    //private String path;
    //private URI path;
    // private String FileName;
    //  private Object query;
    // private String Directorypath;
    // private Object query;
    String query;
    private static String mPath;
    private String input;
    private List<String> listKeys;
    private DocumentCorpus corpus;
    private List<Posting> result_docs = new ArrayList();
    private AdvancedTokenProcessor processor = new AdvancedTokenProcessor();
    private Indexes indexes;
    private Object document_no;
    /**
     * Creates new form GuiHomePage
     */
    public GuiHomePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DirectoryInput = new javax.swing.JTextField();
        DirectorySelectionButton = new javax.swing.JButton();
        ChooseDirectory = new javax.swing.JLabel();
        BuildIndexButton = new javax.swing.JButton();
        QueryIndexButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("ChooseDirectory");

        DirectorySelectionButton.setText("Browse");
        DirectorySelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectorySelectionButtonActionPerformed(evt);
            }
        });

        ChooseDirectory.setText("CECS529");

        BuildIndexButton.setText("Build Index");
        BuildIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildIndexButtonActionPerformed(evt);
            }
        });

        QueryIndexButton.setText("Query Index");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DirectoryInput, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(DirectorySelectionButton)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ChooseDirectory)
                .addGap(224, 224, 224))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(BuildIndexButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(QueryIndexButton)
                .addGap(117, 117, 117))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(ChooseDirectory)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DirectoryInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DirectorySelectionButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BuildIndexButton)
                    .addComponent(QueryIndexButton))
                .addGap(39, 39, 39))
        );

        getContentPane().add(jPanel1, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DirectorySelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectorySelectionButtonActionPerformed
        // TODO add your handling code here:
        
        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jf.showOpenDialog(this);
        File f = jf.getSelectedFile();
        String path = f.getAbsolutePath();
        mPath = path;
        DirectoryInput.setText(path);
        // String Directorypath = path;
        System.out.print("Outside Button: " + path);

    }//GEN-LAST:event_DirectorySelectionButtonActionPerformed

    private void BuildIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildIndexButtonActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            //  String directoryName = query.substring(5);
            //DocumenCorpus corpus = DirectoryCorpus.loadJsonDirectory(Paths.get(directoryName).toAbsolutePath(), ".json");
            // System.out.print("Path inside button:  " +path);

            mPath = DirectoryInput.getText();
            
            long startTime = System.currentTimeMillis();
            corpus = DirectoryCorpus.loadJsonDirectory(Paths.get(mPath).toAbsolutePath(), ".json");
            indexes = indexCorpus(corpus);
            
            //writing INDEX on disk
            DiskIndexWriter disk_writer = new DiskIndexWriter();
            List<Long> voc_positions = disk_writer.write_posting(indexes.index, mPath+"\\index\\");
            List<Long> vocab_positions = disk_writer.write_vocab(indexes.index.getVocabulary(), mPath+"\\index\\");
            disk_writer.write_vocab_table(vocab_positions,voc_positions, mPath+"\\index\\");
            DiskInvertedIndex DII = new DiskInvertedIndex(mPath+"\\index\\");
            //writing Biword on disk
            List<Long> voc_positions_biword = disk_writer.write_posting(indexes.biword_index, mPath+"\\index\\biword\\");
            List<Long> vocab_positions_biword = disk_writer.write_vocab(indexes.biword_index.getVocabulary(), mPath+"\\index\\biword\\");
            disk_writer.write_vocab_table(vocab_positions_biword,voc_positions_biword, mPath+"\\index\\biword\\");
            DiskInvertedIndex DII_biword = new DiskInvertedIndex(mPath+"\\index\\biword\\");
            //DiskInvertedIndex[] i = {DII, DII_biword};
            indexes = new Indexes(DII, DII_biword);        
            long stopTime = System.currentTimeMillis();
            long elapsedTime = stopTime - startTime;

        //    document_no.setText("Total time elapsed for indexing : " + elapsedTime / 1000 + " secs");
            
            BuildIndexButton.setVisible(false);
            QueryIndexButton.setVisible(false);
            
            
            
            // AdvancedTokenProcessor processor = new AdvancedTokenProcessor();
           // String query;

        } catch (IOException ex) {
            Logger.getLogger(DirectorySearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BuildIndexButtonActionPerformed
    
    private static Indexes indexCorpus(DocumentCorpus corpus) throws IOException {
        
        HashSet<String> vocabulary = new HashSet<>();
        List<Double> doc_weights = new ArrayList<>();
        AdvancedTokenProcessor processor = new AdvancedTokenProcessor();
        InvertedIndex index = new InvertedIndex();
        InvertedIndex biword = new InvertedIndex();
        for (Document d : corpus.getDocuments()) {
            EnglishTokenStream ets = new EnglishTokenStream(d.getContent());
            int term_position = 0;
            String previous = "";
            HashMap<String, Integer> map = new HashMap<>();
            for (String s : ets.getTokens()) {
                term_position++;
                List<String> word = processor.processToken(s);

                for (int i = 0; i < word.size(); i++) {
                    
                    if(map.containsKey(word.get(i)))
                    {
                        int count = map.get(word.get(i));
                        map.put(word.get(i),count);
                    }
                    else
                    {
                        map.put(word.get(i), 1);
                    }
                    index.addTerm(word.get(i), d.getId(), term_position);

                    if (previous != "") {
                        biword.addTerm(previous + " " + word.get(i), d.getId(), term_position-1);
                    }
                    previous = word.get(i);

                }
                

            }
            double w_d_t = 0;
            double ld =0;
            for (HashMap.Entry<String,Integer> entry : map.entrySet())
            {
                int tftd = entry.getValue();
                w_d_t = 1 + Math.log(tftd);
                ld += (w_d_t*w_d_t);
            }
            ld = Math.sqrt(ld);
            doc_weights.add(ld);
            ets.close();
        }
        DiskIndexWriter DiskWriter = new DiskIndexWriter();
        DiskWriter.write_doc_weights(doc_weights, mPath+"\\index\\");
        Indexes i = new Indexes(index, biword);

        return i;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiHomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiHomePage().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuildIndexButton;
    private javax.swing.JLabel ChooseDirectory;
    private javax.swing.JTextField DirectoryInput;
    private javax.swing.JButton DirectorySelectionButton;
    private javax.swing.JButton QueryIndexButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
